import re

SUB = [
    '₊₁',
    '₋₁',
    '₊₂',
    '₋₂',
    '₊₃',
    '₋₃',
    '₊₄',
    '₋₄',
]

fn_pattern = re.compile(r'\[(?P<fn>[0-9]+)]')  # [2]
#
# Allow placeholder NML in Value, but filter in Form!
#
# Graphemes used in reconstructions of POc:
POC_GRAPHEMES = "+ ŋʷ gʷ C V N M L a e i o u ā w p b m t d s n r dr l c j y k g q R ŋ ñ pʷ bʷ mʷ kʷ".split()
# Unexpected:'gʷ',  ā and kʷ
# See https://en.wikipedia.org/wiki/Proto-Oceanic_language for a mapping to BIPA
# dr: ⁿr   pre-nasalized voiced alveolar trill consonant
# R: ʀ   voiced uvular trill consonant
POC_BIPA_GRAPHEMES = {
    "dr": "ⁿr",
    "R": "ʀ",
    "ñ": "ɲ",
}
TRANSCRIPTION = [
    'C', 'L', 'F', 'N', 'M',  # CLF and NML
    '⟨', '⟩', '’', '(', ')', '[', ']', '-', '~', '=',  # enclitic boundary
    'ᵐp', 'ʷa', 'ñʰ', 'jᵐ', 'ɸ', 'ϕ', 'ɸʷ', 'h', 'vʰ', 'pʰ', 'nʰ', 'mʰ', 'tʰ', 'bˠ', 'ᵑk', 'h́',
    'ᵐb', 'ᵑr', 'lᵐ', 'lʰ',
    'á', 'ˀa', 'yʰ', 'wʷ', 'kʰ', 'oᵑ',
    'à', 'a̰', 'ä',
    'ā',  # macron
    'ã', 'ã̄', # tilde
    'â',  # circumflex
    'æ', 'ʙ', 'œ','œ̄',
    'oᵐ', 'ᴂ', 'ø̄',
    'ǣ', 'aᵐ',
    'ɒ', 'eᵐ', 'ɛᵑ',
    'ɒ̄', 'nᵐ',
    'ūᵑ', 'fʰ', 'f',
    'z', 'ẓ',
    'tᫀ', 'dᫀ', 'nᫀ',
    'ʔ',
    'ð', 'ð̼', 'ð̫', 'ðᫀ',
    'ɢ', 'g', 'gʷ', 'ᵑg', 'qʷ', 'tʷ', 'lʷ', 'ḷʷ', 'vʷ', 'ᵑgʷ', 'kʷ', 'nʷ', 'fʷ',
    'γ', 'ɣ', 'hʷ',
    'ɔ̀', 'χ', # chi
    'ɔ', 'ʊ', 'o̝',
    'ɔ̄', 'ċ',
    'v',
    'ɵ̄', 'ọ', 'öᵐ', 'ø',
    'ö', 'ō', 'õ',
    'ò', 'ó', 'ô', 'ǿ',
    'î',  # circumflex
    'ĩ',  # tilde
    'ì',  # grave
    'ī',  # macron
    'ɨ', 'ⁿ', 'ɨ̈', # stroke and diaresis
    'í',
    'I',
    'ĩ̄', 'ɨ̄',
    'ị', 'ı', 'ıː', 'ɪ',
    'ʈ', '̄t', 't̼',
    't', 'ṭ', '†',
    'x',
    'θ', 'φ',
    'b',
    'ŋ', 'ŋʷ', 'ŋʰ',
    'ñ',  # tilde
    'ɲ', 'ɳ',
    'è', 'ẽ', # tilde
    'ɛ', 'ɛ́', 'ɛ̄', 'ɛ̃', "ɛ̄", 'ɛ̃́', 'ɛ̀',
    'ə', 'ə̄', 'ɞ',
    'é',
    'ē', # macron
    'ê', 'ë', 'ẽ̄',
    'ū', 'ũ', 'ǖ', 'ú̄',
    'ü', 'û',
    'ù',
    'ú',
    'ʉ̄', 'ʉ', 'w̥',
    'm̫', 'm̥', 'm̀', 'n̼', 'n̥',
    'ṣ', 'š', 'ʃ', 'ʒ',
    'ḍ', 'ɖ', 'ɠ',
    'ũ̃', 'ʂ',
    'č',
    'c̣', 'cʰ', 'ç',
    'ɬ',
    'ʌ', 'ʌ̃', 'ʟ', 'ʌ̄̃',
    'ɭ', 'ḷ', 'ʎ',
    'ȴ', 'bʸ',
    'l̥',  # ring below
    'ʋ', 'ɓ',
    'sʸ', 'v̈', 'vʸ', 'vᫀ', 'rʰ', 'kʸ', 'ɣʷ',
    'ɯ', 'mᵚ', 'nᵚ', 'rᵚ', 'ṛᵚ', 'lᵚ', 'pᵚ',
    'ᶭ', 'lᶭ',  # FIXME: replace with ᵚ
    'mʸ', 'mᶭ', 'nᶭ', 'pᶭ', 'ᶭp',
    'β',  # LATIN SMALL LETTER TURNED M - used as superscript!
    'ṛ', 'ṛᶭ', 'ʁ', 'rᶭ',
    'r̃', 'ɹ', 'ṛʷ', 'ɾ̄',
    'ɾ',  # r with fishhook
    'ɽ', 'z̧', # z with cedilla
]

GROUPS = [
    # Oceanic:
    "Yap",  # Yapese
    "Adm",  # Admiralty
    "NNG",  # North New Guinea
    "SJ",  # Sarmi/Jayapura
    "PT",  # Papuan Tip
    "MM",  # Meso-Melanesian
    "SES",  # Southeast Solomons
    "TM",  # Temotu
    "NCV",  # North and Central Vanuatu
    "SV",  # South Vanuatu
    "NCal",  # New Caledonia
    "Mic",  # Micronesian
    "Fij",  # Fijian
    "Pn",  # Polynesian
    # Other Austronesian:
    "CMP",  # Central Malayo-Polynesian
    "Fma",  # Formosan
    "IJ",  # Irin Jaya
    "CB",  # PEMP - Cenderawasih Bay
    "SH",  # PEMP - South Halmahera
    "RA",  # PEMP - Raja Ampat
    "Bom",  # PEMP - Bomberai
    "WMP",  # Western Malayo-Polynesian
    "SHWNG",
]
# Map proto-language ID to extra-graphemes in addition to POC_GRAPHEMES.
PROTO = {
    # Oceanic:
    "Early Oceanic": [],
    "POc": [],  # Yap
    "PEAd": ['f'], # Adm
    "PWAd": [], # Adm
    "PAdm": ['ə', 'f'], # same thing as above?
    "Proto Central Papuan": ['ɣ', ],
    "PWOc": ['v', 'pᵂ'],  # MM, SJ
    "Proto Northwest Solomonic": ['v'],
    "Proto North Bougainville": [],
    "Proto Meso-Melanesian": [],  # MM
    "PNGOc": ['kʷ'],  # Proto New Guinea Oceanic, i.e. PWOc without reflexes from MM
    "PNNG": ['v'], # NNG
    "PPT": ['v'], # PT
    "PEOc": ['z', 'v', 'ŋʷ', 'C'],
    "PNCal": ['v', 'hʷ', 'kʰ', 'ᵐb', ],
    "PSES": ['ɣ', 'v'],  # FIXME: identify with PSS
    "PSS": ['v', 'ɣ'], # SES
    "PGMic": [],
    "PMic": ['T', 'S', 'x', 'ō', 'f', 'ū', 'z', 'V', 'ī', 'ə̄', 'ə'],  # Proto Micronesian Mic
    "PWMic": [],
    "Proto Western Micronesian": [],
    "Proto Central Micronesian": ['f'],
    "Proto Chuukic-Ponapeic": [],
    "PChk": ['ē', 'ʉ', 'ɨ', 'ō', 'f', 'ū', 'z', 'V', 'ī', 'ə̄', 'ə'],
    "PNCV": ['ʔ', 'z', 'ɣ', 'v', 'vʷ'],  # NCV
    "Proto Central Vanuatu": ['v'],
    "PSV": ['z', 'v', 'ə', 'ɣ'],
    "PSOc": ['v'],  # Proto Southern Oceanic
    "PROc": ['v'], # NCV, SV, Mic
    "PCP": ['z', 'ō', 'ī', 'ŋʷ', 'x', 'ð', 'ĩ', 'ē', 'v', 'ā', 'gʷ'],  # Proto Central Pacific, Fij
    "PPn": ['ʔ', 'h', 'ō', 'f', 'ū', 'z', 'V', 'ī', 'ə̄', 'ə'],  # PN
    "PEPn": ['f'],
    "PEPn-Northern Outlier": [],
    "PCEPn": ['ō', 'f', 'ū', 'z', 'V', 'ī', 'ə̄', 'ə'],  # Proto Central Eastern Polynesian; Hawaiian, Maori, Tuamotuan
    "PNPn": ['f', 'ū', 'ʔ', 'ā', 'h'],
    # Other Austronesian:
    "PAn": ['á', 'C', 'D', 'h', 'N', 'S', 'R', 'T', 'x', 'z', 'Z', 'L', '?', 'ə', '+'],
    "PAn/PMP": ['h'],
    "PCP/PPn": [],
    "PMP": ['ʔ', 'á', 'C', 'D', 'h', 'N', 'S', 'R', 'T', 'z', 'Z', 'L', '?', 'ə', '+', 'W'],
    "PWMP": ['S'],
    "PCEMP": ['ə', 'z'],
    "PCMP": [],
    "PEMP": ['ə', ],
    "PFij": ['v'],
    "Proto E Fijian": [],
    "Proto South Halmahera/West New Guinea": [],
    "Proto Malaita-Makira": ['ʔ', 'ɣ', 'f'],
    # Proto Erakor-Tafea is the immediate putative ancestor of S Efate and Proto Southern Vanuatu.
    "Proto Erakor-Tafea": [],
    # Proto South Melanesian is the putative ancestor of the Southern Vanuatu and New Caledonian languages
    "Proto South Melanesian": [],
    "Proto Cenderawasih Bay": [],
    "Proto Tahitic": [],
    "Proto Markham": ['ɣ', ],
    "Proto Efate": [],
    "Proto Bwaidoga": [],
    "Proto Tanna": ['v'],
    "Proto Tongic": ['h'],
    "Proto Torres-Banks": ['v', 'ʔ', ],
    "Proto Huon Gulf": ['ɣ', ],
    "Proto Hote-Buang": ['ɣ', ],
    "Proto Buang": ['h', 'v', 'ɣ', 'ɛ', ],
    "Proto Mengen": [],
    "Proto Kimbe": [],
    "Proto Samoic": ['f'],
    "Proto Kilivila": ['v', 'z'],
    "Proto S Efate/SV": [],
    "Proto Solomons Outlier": ['f'],
    "Proto Willaumez": ['h'],
    "Proto North New Caledonia": ['ᵐb', ],
    "Proto Far North New Caledonia": [],
    "Proto Central/Eastern Polynesian": [],
    "Proto Guadalcanal-Gelic": [],
    "Proto N Malakula": ['ɣ', ],
    "Proto CW Malakula": ['ɣ', 'v'],
    "Proto Sudest-Nimoa": ['ɣ', ],
    "Proto North Mainland/D’Entrecasteaux": [],
}

# FIXME: Map POS patterns to lists of mormalized POS symbols.
POS = [
    'ADJ',
    'ADJ, VI',
    'ADV',
    'ADVERB OF INTENSITY',
    'adverb',
    'ADV, ADJ',
    'ADN AFFIX',
    'C',
    'DEM',
    'DIR',
    'DIR clause-final',
    'INTERJECTION',
    'IRREALIS',
    'REALIS',
    'LOC',
    'N',
    'N LOC',
    'N, N LOC',
    'N, ? N LOC',
    'N, V',
    'N. V',
    'N & V',
    'N, v',
    'N,V',
    'N,VI',
    'N, VI',
    'N, VT',
    'VI, N',
    'VI, U-verb',
    'VI, inanimate subject',
    'VT, inanimate object',
    'N LOC',
    'N, N Loc',
    'N + POSTPOSITION',
    'PLURAL SUBJECT',
    'V',
    'V, VC',
    'V, C',
    'V; C',
    'V; N',
    'VSt',
    'N,VSt',
    'N; ADJ',
    'N; V',
    'NP',
    'N, VI, VT',
    'VSt, N',
    'VT, VSt',
    'V; ADJ; N',
    'V AUX',
    'V, DIR',
    'V PERFECTIVE',
    'V PASSIVE',
    'VF',
    'v',
    'VT', 'vT',
    'VI',
    'vI', 'vi',
    'VT,VI',
    'VI,VT',
    'VTI',
    'VI, VT',
    'VT, VI',
    'V & N',
    'V, ADJ',
    '?? N LOC, V',
    'PP',
    'POSTVERBAL ADV',
    'PREPV',
    'preverbal clitic',
    'PASS',
    'postposed particle',
    'PREP',
    'PRO',
    'POSTPOSITION',
    'R-',
    'R',
    'RELATIONAL N',
]

KINSHIP = [
    '(ADDR)',
    'BD',
    'BDC',
    'BC',
    'BCC',
    'BDH',
    'BS',
    'BSSD',
    'BSW',
    'BW',
    'CC',
    'CCC',
    'CCE',
    'CD',
    'CE',
    'CS',
    'D',
    'DDC',
    'DH',
    'DSSW',
    'DSW',
    'EBS',
    'EF',
    'EFB',
    'EFZ',
    'EFZH',
    'EG',
    'eG',
    'eGE',
    'EGC',
    'EM',
    'EMByD',
    'EMM',
    'EMZ',
    'EoG',
    'EoGC',
    'EoGE',
    '{EoG}C',
    'EP',
    'EPB',
    'EPF',
    'EPG',
    'EPGE',
    'EPGoC',
    'EPGsC',
    'EPMH',
    'EPP',
    'E{PsG}',
    'E{PsG}oC',
    'ESG',
    'esG',
    '{EsG}C',
    'EsGE',
    'EZ',
    'FB',
    'FBD',
    'FBDC',
    'FBDS',
    'FBeS',
    'FBoC',
    'FBS',
    'FBSC',
    'FBsC',
    'FBW',
    'FC',
    'FEB',
    'FeBC',
    'FeBD',
    '{FeB}S',
    'FFB',
    'FFBD',
    'FFBDD',
    'FFBDH',
    'FFBS',
    'FFBW',
    'FFC',
    'FFF',
    'FFFBS',
    'FFFZ',
    'FFMBW',
    'FF{PsG}SSW',
    'FFZD',
    'FFZS',
    'FG',
    'FGCC',
    'FGS',
    'FGSC',
    'FGSCC',
    'FGSS',
    'FMB',
    'FMBS',
    'FMZS',
    'FPGSCesC',
    'F{PsG}CD',
    'F{PsG}CS',
    'F{PsG}CSS',
    'F{PsG}D',
    'F{PsG}S',
    'F{PsG}SW',
    'FW',
    '{FyB}sC',
    'FZ',
    'FZC',
    'FZCC',
    'FZCCE',
    'FZD',
    'FZDC',
    'FZDD',
    'FZDDS',
    'FZDDDS',
    'FZDH',
    'FZDS',
    'FZH',
    'FZS',
    'FZSS',
    'FZSW',
    'FZW',
    'GC',
    'GCC',
    'GCE',
    'GDH',
    'GEC',
    'GEF',
    'GEP',
    'GF',
    '{GoC}E',
    'GS',
    'GsE',
    'H',
    'HB',
    'HBC',
    'HeB',
    '{HeB}',
    '{HeB}C',
    'HeBW',
    'HF',
    'HFB',
    'HF{PsG}D',
    'HFZ',
    'HFZS',
    'HGC',
    'HGS',
    'HMB',
    'HMBS',
    'HP',
    'H{PeG}SC',
    'HPGDC',
    'HyB',
    'HZ',
    'HZC',
    'HZD',
    'HZH',
    'MB',
    'MBC',
    'MBCC',
    'MBDC',
    'MBDDD',
    'MBDS',
    '{MBeS}',
    'MBS',
    'MBSC',
    'MBSS',
    'MBW',
    'MBysC',
    'MEZH',
    'MF',
    'MFB',
    'MFBD',
    'MFBS',
    'MFF{PsG}D',
    'MFM',
    'MFMB',
    'MFMBS',
    'MFZDD',
    'MFZDS',
    'MFZS',
    'MFZSD',
    'MG',
    'MH',
    'MMB',
    'MMBC',
    'MMBDDC',
    'MMBDH',
    'MMC',
    'MMF',
    'MMM',
    'MMMB',
    'MM{PsG}DD',
    'MMyZ',
    'MMZCS',
    'MMZD',
    'MMZDDC',
    'MMZH',
    'MMZS',
    'MP',
    'MPGD',
    'MPGS',
    'M{PoG}S',
    'M{PsG}D',
    'M{PsG}S',
    'M{PsG}oG',
    'MZCC',
    'MZDC',
    'MZDoC',
    'MZDS',
    'MZH',
    'MZoC',
    'MZS',
    'MZSC',
    'MZSeC',
    'MZseC',
    'oGC',
    'PB',
    'PBS',
    'PBW',
    'PeGC',
    '{PeG}CC',
    '{PesG}sC',
    'PF',
    'PFZ',
    'PGC',
    'PGCC',
    'PGCH',
    'PGCW',
    'PGD',
    '{PG}D',
    'PGDC',
    'PGDH',
    'PGeC',
    'PGESC',
    'PGoC',
    'PGS',
    '{PG}S',
    'PGsC',
    'PGsCE',
    'PGseC',
    'PGSW',
    'PGyC',
    'PM',
    'PMH',
    '{PoG}CsE',
    '{PoG}D',
    '{PoG}DS',
    '{PoG}E',
    '{PoG}eS',
    '{PoG}oC',
    '{PoG}SC',
    '{PoG}sC',
    '{{PoG}SC}C',
    '{PoG}sCE',
    '{PoG}sCsC',
    '{PoG}SS',
    '{PoG}yD',
    '{PoG}ZDDD',
    'PP',
    'PPE',
    'P{PeG}CCC',
    'PPG',
    'PPGC',
    'PPGCD',
    'PPGCS',
    'P{PoG}S',
    'P{PoG}SC',
    'PPP',
    'P{PsG}D',
    'P{PsG}S',
    '{PsG}C',
    '{PsG}CC',
    '{PsG}CDS',
    '{PsG}D',
    '{PsG}DC',
    '{PsG}DD',
    '{PsG}eC',
    '{PsG}eS',
    '{PsG}esC',
    '{PsG}eS',
    '{PsG}oC',
    '{PsG}S',
    '{PsG}sC',
    '{PsG}sCE',
    '{PsG}SD',
    '{PsG}seC',
    '{PsG}yC',
    '{PsG}ysC',
    '{PseG}C',
    'PyGC',
    '{PyG}C',
    '{PysG}C',
    '{PysG}sC',
    'PZ',
    'PZH',
    'S',
    'SDD',
    'sG',
    'sGC',
    'sGCE',
    'sGE',
    'sGEoG',
    'sGE{PsG}oC',
    'sGsCE',
    'SSD',
    'SSS',
    'SSSS',
    'SW',
    'SWB',
    'SWBW',
    'WB',
    'WBC',
    'WBW',
    'WByW',
    '{WeZ}♀H',
    'WFB',
    'WFGyD',
    'WGS',
    'WM',
    'WMB',
    'WMZyD',
    'WPG',
    'WSZ',
    'WZ',
    'WZC',
    'WZCC',
    'WZeH',
    'WZS',
    'WZyH',
    'yG',
    'yZ',
    'ZC',
    'ZCC',
    'ZCE',
    'ZD',
    'ZDC',
    'ZDDC',
    'ZDDD',
    'ZDH',
    'ZDSW',
    'ZH',
    'ZHS',
    'ZS',
    'ZSC',
    'ZSDD',
    'ZSW',
    'ZW',
    'etc',
    'sGCC',
]

def re_choice(items):
    return r'|'.join(re.escape(i) for i in items)

kinship_pattern = re.compile(r"’\s*(,\s+([♀♂]|\([♀♂]\?\))?({})( etc)?)+".format(re_choice(sorted(KINSHIP, key=lambda s: -len(s)))))
proto_pattern = re.compile(r'(\((?P<relno>[0-9])\)\s*)?'
                           r'(?P<pl>({}))\s+'
                           r'(?P<root>root\s+)?'
                           r'(?P<pldoubt>\((POC)?\?\)\s*)?'
                           r'(?P<pos>\(({})\)\s*)?'
                           r'(?P<fn>\[[0-9]+]\s+)?'
                           r'(?P<pfdoubt>\?)?†?\*'.format(re_choice(PROTO), re_choice(POS)))  # FIXME: record dagger!
witness_pattern = re.compile(r'\s+({})(\s*:\s+)'.format(re_choice(GROUPS)))
